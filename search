#!/usr/bin/env python

import abc
import argparse
import collections
import shelve


SearchQuery = collections.namedtuple('SearchQuery', ['field', 'min', 'max'])


class Searcher(object):

    __meta__ = abc.ABCMeta

    def __init__(self, index_obj):
        self._index = index_obj

    @abc.abstractproperty
    def _get_query_plan(self, query):
        pass

    def search(self, query):
        min_key = query.field + '.min'
        max_key = query.field + '.max'
        self._min = self._index.get(min_key) if query.min is None else query.min
        self._max = self._index.get(max_key) if query.max is None else query.max

        if self._min is None or self._max is None:
            raise ValueError(
                'could not determine min or max for attribute: ' + query.field)

        results = set()
        for key in self._get_query_plan(query):
            print results
            docs = self._index.get(key, None)
            if docs:
                results.update(docs)
        return results


class NaiveSearcher(Searcher):

    def _get_query_plan(self, query):
        plan = []
        for val in xrange(self._min, self._max + 1):
            plan.append(query.field + '.' + str(val))
        return plan


class LogarithmicSearcher(Searcher):

    def _get_query_plan(self, query):
        """Given SearchQuery('x', 18, 222), produces the following query plan:

        ['x.18',
         'x.19',
         'x.20:29',
         'x.30:39',
         'x.40:49',
         'x.50:59',
         'x.60:69',
         'x.70:79',
         'x.80:89',
         'x.90:99',
         'x.100:199',
         'x.200:209',
         'x.210:219',
         'x.220',
         'x.221',
        ]
        """
        plan = []

        curr = self._min
        increase_rate = 1

        while curr < self._max:
            if (curr % (increase_rate * 10) == 0 and
                curr + increase_rate * 10 <= self._max):
                increase_rate *= 10

            elif curr + increase_rate > self._max:
                increase_rate /= 10

            else:
                prefix = query.field + '.' + str(curr)
                if increase_rate == 1:
                    key = prefix
                else:
                    key = prefix + ':' + str(curr + increase_rate - 1)
                plan.append(key)

                curr = curr + increase_rate

        print plan
        return plan


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Performs a numeric range search over an index.')
    parser.add_argument(
        'index_file',
        help='Path to a file to the index')
    parser.add_argument(
        '--index_type',
        choices=['naive', 'logarithmic'],
        default='logarithmic',
        help='The index type.')
    parser.add_argument(
        'field',
        help='The field to perform the range query on.')
    parser.add_argument(
        'min',
        type=int,
        help='The minimum value (inclusive).')
    parser.add_argument(
        'max',
        type=int,
        help='The maximum value (exlusive).')

    args = parser.parse_args()
    shelf = shelve.open(args.index_file)
    searcher = (LogarithmicSearcher if args.index_type == 'logarithmic'
               else NaiveSearcher)
    searcher = LogarithmicSearcher(shelf)
    print searcher.search(SearchQuery(args.field, args.min, args.max))
