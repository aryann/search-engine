#!/usr/bin/env python

import abc
import argparse
import shelve


class Index(object):

    __meta__ = abc.ABCMeta

    def __init__(self, index_obj):
        self._index = index_obj

    @abc.abstractproperty
    def put(self, doc):
        pass

    def _put_value(self, key, doc):
        existing_docs = self._index.get(key) or set()
        existing_docs.add(doc['id'])
        self._index[key] = existing_docs

    def _record_min_max(self, name, value):
        min_key = name + '.min'
        max_key = name + '.max'
        self._index[min_key] = min(self._index.get(min_key, value), value)
        self._index[max_key] = max(self._index.get(max_key, value), value)


class NaiveIndex(Index):

    def put(self, doc):
        for name, value in doc['properties'].iteritems():
            key = name + '.' + str(value)
            self._put_value(key, doc)
            self._record_min_max(name, value)


class LogarithmicIndex(Index):

    def put(self, doc):
        # TODO: This is wrong. We need to use the min/max information
        # in order to properly index all values.

        for name, value in doc['properties'].iteritems():
            self._record_min_max(name, value)
            self._put_value(name + '.' + str(value), doc)

            bucket = 1
            while value != 0:
                bucket *= 10
                value = value / bucket * bucket
                key = name + '.' + str(value) + ':' + str(value + bucket - 1)
                self._put_value(key, doc)


if __name__ == '__main__':
    doc1 = {
        'id': 1,
        'properties': {
            'x': 2,
            'y': 100,
         },
    }

    doc2 = {
        'id': 2,
        'properties': {
            'x': 20,
            'y': 102,
         },
    }

    doc3 = {
        'id': 3,
        'properties': {
            'x': 5199,
            'y': 102,
         },
    }

    parser = argparse.ArgumentParser(
        description='Indexes one or more documents.')
    parser.add_argument(
        'index_file',
        help=('Path to a file to save the index to. File is created if it '
              'does not exist. Indexes can be modified later.'))
    parser.add_argument(
        '--strategy',
        choices=['naive', 'logarithmic'],
        default='logarithmic',
        help='The indexing strategy to use.')

    args = parser.parse_args()
    shelf = shelve.open(args.index_file)
    indexer = (LogarithmicIndex if args.strategy == 'logarithmic'
               else NaiveIndex)
    index = indexer(shelf)
    index.put(doc1)
    index.put(doc2)
    index.put(doc3)
    shelf.close()
